Installation

Preferred Prerequisites
    Python3.8
Preferred - Import modules apart that may not be installed with base Python3
   yaml
   requests
   psutil

Tools works with python 2.7.5 and without yaml, requests modules also local code to handle equivalent functions.


Downloading project artifacts
  Using git, clone this project using the command
     mkdir JaaduVision
     cd JaaduVision
     git clone https://github.com/venkatbhat62/JaaduVision/
  To get updates, be in JaaduVision directory
     git pull https://github.com/venkatbhat62/JaaduVision/

Customization for OS stats collection
 Edit client/JAGatherOSStats.yml to customize WebServerURL, hostname spec for each environment 
    and any other desired parameters. Refer to the sample file for more information.
 Suggest to keep one spec file per OS type like linux, windows so that same file can be deployed
    platform wide, or even on all servers of interest.
    If process names, file system names vary among different platforms, can maintain separate spec file
       per platform in platform specific directories.
       
Cutomization for log stats collection
  Edit client/JAGatherLogStats.yml to customize
     WebServerURL, hostname spec for each environment, log file name, service name and associated 
       text patterns to search. Refer to the sample file for more information.
  Since service name is to be maintained unique within a host type or within a component type,
    suggest to prepare the client/JAGatherLogStats<componentType>.yml file on web server and deploy those files to
    all hosts of a platform from where log stats are to be collected. Thus, all hosts of same platform will have uniform spec.
  For large installations with many platforms and thousands of servvers, 
     suggest to keep separate spec files per platform where component types vary. This is to keep the number of service definitions
      small so that real time overhead of regular expression matching will be limited to the component of the platform.
      This apporach will also allow use of different grafana/ webserver/influxdb/prometheus gateway setup per platform or group of platforms.
      
Installation at host being monitored
  Install the scripts under client directory under a service account that can access all log files
    to be parsed, whose stats are to be uploaded to web server
  To gather and post OS stats every minute and continue the task for one hour, set below parameters in JAGatherOSStats.yml
     DataPostIntervalInSec: 60
     DataCollectDurationInSec: 3580
  Add a crontab to run JAGatherOSStats.py every hour
   1 * * * * cd <path>;python3 JAGatherOSStats.py -c <OSSpecificConfigFile> -C <componentName> -S <siteName> -P <platformName>
     <componentName>, <siteName>, <platformName> are posted to prometheus, influxdb, Loki as labels so that dashboard variables can be
        defined to select specific values and customize dashboards per component/per platform basis.
        
  To gather and post Log stats every minute and continue the task for one hour, set below parameters in JAGatherLogStats.yml
     DataPostIntervalInSec: 60
     DataCollectDurationInSec: 3580

  Add a crontab to run JAGatherLogStats.py every hour
   1 * * * * cd <path>;python3 JAGatherLogStats.py -c <ComponentSpecificConfigFile> -C <componentName> -S <siteName> -P <platformName>
     <componentName>, <siteName>, <platformName> are posted to prometheus, influxdb, Loki as labels so that dashboard variables can be
        defined to select specific values and customize dashboards per component/per platform basis.
  
Installation of python3 scripts on web server
   Place all files from cgi-bin of distribution folder under cgi-bin of web server
   Change script permission to executable
     chmode 755 *.py

Installing grafana OSS version on web server
   https://grafana.com/docs/grafana/latest/installation/debian/ - works on Ubuntu server
       sudo apt-get install -y apt-transport-https
        sudo apt-get install -y software-properties-common wget
        wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
        echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
        sudo apt-get update
        sudo apt-get install grafana

        sudo systemctl daemon-reload
        sudo systemctl start grafana-server
        sudo systemctl status grafana-server

        sudo systemctl enable grafana-server.service

   https://grafana.com/docs/grafana/latest/installation/rpm/ - for rpm based OS 

   web access https://hostName:6443/
       admin  - admin first time
          change the password

    ### grafana customize to use different port number 
    sudo vi /etc/grafana/grafana.ini
    [server]
    protocol = https
    http_port = 6443
    root_url = https://hostName:6443/
    cert_file = <filename>
    cert_key = <fileName>

Installing prometheus on web server
  Below steps for Ubuntu server
    wget https://github.com/prometheus/prometheus/releases/download/v2.28.1/prometheus-2.28.1.linux-amd64.tar.gz
    gzip prometheus-2.28.1.linux-amd64.tar.gz
    tar -xvf prometheus-2.28.1.linux-amd64.tar
    cd prometheus-2.28.1.linux-amd64
    sudo useradd -M -r -s /bin/false prometheus
    sudo mkdir /etc/prometheus /var/lib/prometheus
    sudo cp prometheus /usr/local/bin
    sudo cp promtool /usr/local/bin
    sudo chown prometheus:prometheus /usr/local/bin/{prometheus,promtool}
    sudo cp -r {consoles,console_libraries} /etc/prometheus/
    sudo cp prometheus.yml /etc/prometheus/

    sudo chown -R prometheus:prometheus /etc/prometheus
    sudo chown prometheus:prometheus /var/lib/prometheus

    Web access promotheus http://hostName:9090/
    to access metrics  http://hostName:9090/metrics

    sudo vi /etc/systemd/system/prometheus.service
    [Unit]
    Description=Prometheus Time Series Collection and Processing Server
    Wants=network-online.target
    After=network-online.target

    [Service]
    User=prometheus
    Group=prometheus
    Type=simple
    ExecStart=/usr/local/bin/prometheus \
        --config.file /etc/prometheus/prometheus.yml \
        --storage.tsdb.path /var/lib/prometheus/ \
        --web.console.templates=/etc/prometheus/consoles \
        --web.console.libraries=/etc/prometheus/console_libraries

    [Install]
    WantedBy=multi-user.target
    :wq

    sudo systemctl daemon-reload
    sudo systemctl enable --now prometheus


Installing pushgateway on web server
    wget https://github.com/prometheus/pushgateway/releases/download/v1.4.1/pushgateway-1.4.1.linux-amd64.tar.gz

    tar -xvzf pushgateway-1.4.1.linux-amd64.tar.gz
    cd pushgateway-1.4.1.linux-amd64
    sudo cp pushgateway /usr/local/bin/pushgateway
    # run pushgateway under prometheus, do not create separate account for pushgateway

    sudo vi /etc/systemd/system/pushgateway.service
    [Unit]
    Description=Pushgateway
    Wants=network-online.target
    After=network-online.target

    [Service]
    User=prometheus
    Group=prometheus
    Type=simple
    ExecStart=/usr/local/bin/pushgateway \
        --web.listen-address=":9091" \
        --web.telemetry-path="/metrics" \
        --persistence.file="/tmp/metric.store" \
        --persistence.interval=5m \
        --log.level="info"
    # below line is giving issue, fix it later 2021/07/11 venkat
    #    --log.format="logger:stdout?json=true"

    [Install]
    WantedBy=multi-user.target
    :wq

    sudo systemctl daemon-reload
    sudo systemctl restart pushgateway

    ######### config prometheus to use pushgateway
    sudo vi /var/snap/prometheus/32/prometheus.yml

    ## add below lines
    - job_name: 'pushgateway'
        honor_labels: true
        static_configs:
    - targets: ['localhost:9091']

    # restart prometheus
    sudo systemctl restart prometheus

    Use this to show pictures, association between components, sites, show values within components,
    use color coding to show green, amber, red states
    https://grafana.com/grafana/plugins/jdbranham-diagram-panel/

    ### install grafana diagram plugin =============
    sudo grafana-cli plugins install jdbranham-diagram-panel


Installing Loki and customing port

=================== Loki install ==================
https://github.com/grafana/loki/releases
https://grafana.com/docs/loki/latest/installation/local/

curl -O -L "https://github.com/grafana/loki/releases/download/v2.3.0/loki-linux-amd64.zip"
unzip "loki-linux-amd64.zip"
chmod a+x "loki-linux-amd64"
wget https://raw.githubusercontent.com/grafana/loki/master/cmd/loki/loki-local-config.yaml

To run loki
./loki-linux-amd64 -config.file=loki-local-config.yaml

To post data to loki
  curl -H "Content-Type: application/json" -X POST  -v "http://localhost:3100/api/prom/push"
 --data-raw   '{"streams": [{ "labels": "{foo=\"bar\"}", "entries": [{ "ts": "2021-09-11T08:28:06.801064-04:00"
, "line": "fizzbuzz" }] }]}'

To get the previously posted data
  curl -v http://localhost:3100/loki/api/v1/label/foo/values

Change loki listen port from 3100 to 9081 or whatever port you desire in loki-local-config.yaml
Copy loki-linux-amd64 and loki-local-config.yaml to /var/www/JaaduAudit/cgi-bin and
Add below crontab entry so that loki runs all the time.

*/6 * * * * cd <lokiDirectory>;nohup ./loki-linux-amd64 -config.file=loki-local-config.yaml &

